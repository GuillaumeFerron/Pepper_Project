/*
 * Copyright (c) 2010, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Willow Garage, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


#include <ros/ros.h>
#include <geometry_msgs/Twist.h>
#include <naoqi_bridge_msgs/JointAnglesWithSpeed.h>//try to find a include to add naoqi_bridge_msgs::JointAnglesWithSpeedConstPtr
#include <sensor_msgs/Joy.h>
#include "boost/thread/mutex.hpp"
#include "boost/thread/thread.hpp"
#include "ros/console.h"

#define PS3_BUTTON_SELECT            0
#define PS3_BUTTON_STICK_LEFT        1
#define PS3_BUTTON_STICK_RIGHT       2
#define PS3_BUTTON_START             3
#define PS3_BUTTON_CROSS_UP          4
#define PS3_BUTTON_CROSS_RIGHT       5
#define PS3_BUTTON_CROSS_DOWN        6
#define PS3_BUTTON_CROSS_LEFT        7
#define PS3_BUTTON_REAR_LEFT_2       8
#define PS3_BUTTON_REAR_RIGHT_2      9
#define PS3_BUTTON_REAR_LEFT_1       10
#define PS3_BUTTON_REAR_RIGHT_1      11
#define PS3_BUTTON_ACTION_TRIANGLE   12
#define PS3_BUTTON_ACTION_CIRCLE     13
#define PS3_BUTTON_ACTION_CROSS      14
#define PS3_BUTTON_ACTION_SQUARE     15
#define PS3_BUTTON_PAIRING           16

#define PS3_AXIS_STICK_LEFT_LEFTWARDS    0
#define PS3_AXIS_STICK_LEFT_UPWARDS      1
#define PS3_AXIS_STICK_RIGHT_LEFTWARDS   2
#define PS3_AXIS_STICK_RIGHT_UPWARDS     3
#define PS3_AXIS_BUTTON_CROSS_UP         4
#define PS3_AXIS_BUTTON_CROSS_RIGHT      5
#define PS3_AXIS_BUTTON_CROSS_DOWN       6
#define PS3_AXIS_BUTTON_CROSS_LEFT       7
#define PS3_AXIS_BUTTON_REAR_LEFT_2      8
#define PS3_AXIS_BUTTON_REAR_RIGHT_2     9
#define PS3_AXIS_BUTTON_REAR_LEFT_1      10
#define PS3_AXIS_BUTTON_REAR_RIGHT_1     11
#define PS3_AXIS_BUTTON_ACTION_TRIANGLE  12
#define PS3_AXIS_BUTTON_ACTION_CIRCLE    13
#define PS3_AXIS_BUTTON_ACTION_CROSS     14
#define PS3_AXIS_BUTTON_ACTION_SQUARE    15
#define PS3_AXIS_ACCELEROMETER_LEFT      16
#define PS3_AXIS_ACCELEROMETER_FORWARD   17
#define PS3_AXIS_ACCELEROMETER_UP        18
#define PS3_AXIS_GYRO_YAW                19

class TurtlebotTeleop
{
public:
  TurtlebotTeleop();

private:
  void joyCallback(const sensor_msgs::Joy::ConstPtr& joy);
  void publish();

  ros::NodeHandle ph2_,ph_, nh_;

  int linear_y_,linear_, angular_, deadman_axis_,tooglehead_, headyaw_, headpitch_;
  int freehead;
  double refyaw,refpitch,l_y_scale_,l_scale_, a_scale_,headspeed_;

  ros::Publisher joint_angles_pub_;
  ros::Publisher vel_pub_;
  ros::Subscriber joy_sub_;
  naoqi_bridge_msgs::JointAnglesWithSpeed newheadpose;
  geometry_msgs::Twist last_published_;
  boost::mutex publish_mutex_;
  bool deadman_pressed_;
  bool zero_twist_published_;
  ros::Timer timer_;
  const static float maxyaw=2;
  const static float maxpitch=0.63;
  const static float deltayaw =1;
  const static float deltapitch =1;

};

TurtlebotTeleop::TurtlebotTeleop():
  ph_("~"),
  linear_(1),
  linear_y_(4),
  angular_(0),
  deadman_axis_(4),
  l_scale_(0.3),
  l_y_scale_(0.3),
  a_scale_(0.9),
  headyaw_(2),
  headpitch_(3),
  headspeed_(0.1),
  tooglehead_(6)

 
{
  ph_.param("axis_linear", linear_, linear_);
  ph_.param("axis_linear_y", linear_y_, linear_y_);
  ph_.param("axis_angular", angular_, angular_);
  ph_.param("axis_deadman", deadman_axis_, deadman_axis_);
  ph_.param("scale_angular", a_scale_, a_scale_);
  ph_.param("scale_linear", l_scale_, l_scale_);
  ph_.param("scale_linear_y", l_y_scale_, l_y_scale_);
  ph_.param("axis_head_yaw", headyaw_, headyaw_);
  ph_.param("axis_head_pitch", headpitch_, headpitch_);
  ph_.param("head_speed_factor", headspeed_, headspeed_);
  ph_.param("toogle_head_button", tooglehead_,tooglehead_);

  deadman_pressed_ = false;
  zero_twist_published_ = false;

  vel_pub_ = ph_.advertise<geometry_msgs::Twist>("cmd_vel", 1, true);
  joint_angles_pub_ = ph_.advertise<naoqi_bridge_msgs::JointAnglesWithSpeed>("pose/joint_angles", 1, true);
  joy_sub_ = nh_.subscribe<sensor_msgs::Joy>("joy", 10, &TurtlebotTeleop::joyCallback, this);

  timer_ = nh_.createTimer(ros::Duration(0.1), boost::bind(&TurtlebotTeleop::publish, this));
}

void TurtlebotTeleop::joyCallback(const sensor_msgs::Joy::ConstPtr& joy)
{ 
  geometry_msgs::Twist vel;
  
  vel.angular.z = a_scale_*joy->axes[angular_];
  vel.linear.x = l_scale_*joy->axes[linear_];
  vel.linear.y = l_y_scale_*joy->axes[linear_y_];
  last_published_ = vel;
  deadman_pressed_ = joy->buttons[deadman_axis_];

/*   VERSION 1 step
   refyaw=refyaw+joy->axes[headyaw_]*deltayaw;
   refpitch=refpitch+joy->axes[headpitch_]*deltapitch;

   if (refpitch>maxpitch)  refpitch=maxpitch;
   if (refpitch<-maxpitch) refpitch=-maxpitch;

   if (refyaw>maxyaw) refyaw=maxyaw;
   if (refyaw<-maxyaw) refyaw=-maxyaw; */
/*   VERSION 2 continious */
	if (joy->buttons[tooglehead_]) freehead=!freehead; // TOOGLE free head to block head
	if (freehead) {
   refyaw=joy->axes[headyaw_]*maxyaw;	
   refpitch=joy->axes[headpitch_]*maxpitch;}

  //headpose.joint_names.clear();
  //headpose.joint_angles.clear();
 // headpose.joint_names.push_back(String(HeadYaw));
 // headpose.joint_names.push_back(String(HeadPitch));
 // headpose.joint_angles.push_back(2*headyaw_) ;
  //headpose.joint_angles.push_back(0,63*headpitch_) ;

  //naoqi_bridge_msgs::JointAnglesWithSpeed newheadpose;
  
  newheadpose.joint_names.clear();
  newheadpose.joint_names.push_back("HeadYaw");
  newheadpose.joint_names.push_back("HeadPitch");
  newheadpose.joint_angles.clear();
  newheadpose.joint_angles.push_back(refyaw);
  newheadpose.joint_angles.push_back(refpitch);
  newheadpose.speed =headspeed_;
  newheadpose.relative =0; // ABSOLUTE MODE
  //headpose=newheadpose;


}

void TurtlebotTeleop::publish()
{
  boost::mutex::scoped_lock lock(publish_mutex_);
  joint_angles_pub_.publish(newheadpose);
  if (deadman_pressed_)
  {
    vel_pub_.publish(last_published_);
    zero_twist_published_=false;
  }
  else if(!deadman_pressed_ && !zero_twist_published_)
  {
    vel_pub_.publish(*new geometry_msgs::Twist());
    zero_twist_published_=true;
  }
}

int main(int argc, char** argv)
{
  ros::init(argc, argv, "pepper_teleop");
  TurtlebotTeleop turtlebot_teleop;

  ros::spin();
}
